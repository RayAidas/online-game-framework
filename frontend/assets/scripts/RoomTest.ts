import { _decorator, Button, Color, Component, instantiate, Label, Layout, Node, ScrollView, Sprite, Vec3 } from "cc";
import { WsClient } from "tsrpc-browser";
import { GameTest } from "./GameTest";
import { ServiceType as RoomServiceType } from "./shared/protocols/serviceProto_roomServer";
import { FrameSyncClient, IFrameSyncConnect, InputHandler } from "./shared/services/FrameSyncClient";
import { MsgAfterFrames, MsgInpFrame, MsgRequireSyncState, MsgSyncFrame, MsgSyncState } from "./shared/types/FrameSync";
import { RoomData } from "./shared/types/RoomData";
import { UserInfo } from "./shared/types/UserInfo";

const { ccclass, property } = _decorator;

@ccclass("RoomTest")
export class RoomTest extends Component {
	@property(Label) roomIdLabel: Label = null!;
	@property(Label) roomNameLabel: Label = null!;
	@property(Label) ownerLabel: Label = null!;
	@property(Label) userCountLabel: Label = null!;
	@property(ScrollView) userListScrollView: ScrollView = null!;
	@property(Node) userItemTemplate: Node = null!;
	@property(Button) readyButton: Button = null!;
	@property(Label) readyStatusLabel: Label = null!;
	@property(Label) userAlreadyReadyLabel: Label = null!;
	@property(GameTest) gameTest: GameTest = null!;

	private roomClient: WsClient<RoomServiceType>;
	private currentRoomData: RoomData | null = null;
	private currentUser: UserInfo | null = null;
	// Â∏ßÂêåÊ≠•ÂÆ¢Êà∑Á´Ø
	private frameSyncClient: FrameSyncClient | null = null;

	start() {
		this.updateRoomInfo();
	}

	update(deltaTime: number) {}

	private setupEventListeners() {
		// ÁõëÂê¨Áî®Êà∑Âä†ÂÖ•
		this.roomClient.listenMsg("serverMsg/UserJoin", (msg) => {
			console.log("Áî®Êà∑Âä†ÂÖ•:", msg.user);
			this.handleUserJoin(msg);
		});

		// ÁõëÂê¨Áî®Êà∑Á¶ªÂºÄ
		this.roomClient.listenMsg("serverMsg/UserExit", (msg) => {
			console.log("Áî®Êà∑Á¶ªÂºÄ:", msg.user);
			this.handleUserExit(msg);
		});

		// ÁõëÂê¨Êàø‰∏ªÂèòÊõ¥
		this.roomClient.listenMsg("serverMsg/OwnerChanged", (msg) => {
			console.log("Êàø‰∏ªÂèòÊõ¥:", msg.oldOwner, "->", msg.newOwner);
			this.handleOwnerChanged(msg);
		});

		// ÁõëÂê¨Áî®Êà∑ÂáÜÂ§áÁä∂ÊÄÅÂèòÊõ¥
		this.roomClient.listenMsg("serverMsg/UserReadyChanged", (msg) => {
			console.log("Áî®Êà∑ÂáÜÂ§áÁä∂ÊÄÅÂèòÊõ¥:", msg.user.nickname, "ÂáÜÂ§áÁä∂ÊÄÅ:", msg.isReady);
			this.handleUserReadyChanged(msg);
		});

		// ÁõëÂê¨Ê∏∏ÊàèÂºÄÂßãÊ∂àÊÅØ
		this.roomClient.listenMsg("serverMsg/GameStarted", (msg) => {
			console.log("Ê∏∏ÊàèÂºÄÂßã:", msg.message);
			this.handleGameStarted(msg);
		});

		// ÁõëÂê¨Â∏ßÂêåÊ≠•Ê∂àÊÅØ
		this.roomClient.listenMsg("serverMsg/SyncFrame", (msg) => {
			console.log("Êî∂Âà∞Â∏ßÂêåÊ≠•Êï∞ÊçÆ:", msg.frameIndex);
			this.handleSyncFrame(msg);
		});
	}

	private updateRoomInfo() {
		if (!this.currentRoomData) {
			this.clearRoomInfo();
			return;
		}

		// Êõ¥Êñ∞ÊàøÈó¥Âü∫Êú¨‰ø°ÊÅØ
		if (this.roomIdLabel) {
			this.roomIdLabel.string = `ÊàøÈó¥ID: ${this.currentRoomData.id}`;
		}

		if (this.roomNameLabel) {
			this.roomNameLabel.string = `ÊàøÈó¥ÂêçÁß∞: ${this.currentRoomData.name}`;
		}

		if (this.ownerLabel) {
			const owner = this.currentRoomData.users.find((user) => user.id === this.currentRoomData!.ownerId);
			this.ownerLabel.string = `Êàø‰∏ª: ${owner ? owner.nickname : "Êú™Áü•"}`;
		}

		if (this.userCountLabel) {
			this.userCountLabel.string = `Áî®Êà∑Êï∞Èáè: ${this.currentRoomData.users.length}/${this.currentRoomData.maxUser}`;
		}

		// Êõ¥Êñ∞Â∑≤ÂáÜÂ§áÁé©ÂÆ∂Êï∞ÈáèÊòæÁ§∫
		this.updateReadyCount();

		// Êõ¥Êñ∞Áî®Êà∑ÂàóË°®
		this.updateUserList();

		// Êõ¥Êñ∞ÂáÜÂ§áÁä∂ÊÄÅÊòæÁ§∫
		this.updateReadyStatus();
	}

	private updateReadyCount() {
		if (!this.currentRoomData) {
			if (this.userAlreadyReadyLabel) {
				this.userAlreadyReadyLabel.string = "Â∑≤ÂáÜÂ§á: 0/0";
			}
			return;
		}

		// ËÆ°ÁÆóÂ∑≤ÂáÜÂ§áÁöÑÁé©ÂÆ∂Êï∞Èáè
		const readyCount = this.currentRoomData.users.filter((user) => user.isReady).length;
		const totalCount = this.currentRoomData.users.length;

		if (this.userAlreadyReadyLabel) {
			this.userAlreadyReadyLabel.string = `Â∑≤ÂáÜÂ§á: ${readyCount}/${totalCount}`;
		}
		if (readyCount == this.currentRoomData.maxUser) {
			this.gameTest.node.active = true;
		}
	}

	private updateUserList() {
		if (!this.userListScrollView || !this.userItemTemplate || !this.currentRoomData) {
			return;
		}

		const content = this.userListScrollView.content;

		// Ê∏ÖÈô§Áé∞ÊúâÁî®Êà∑È°π
		content.removeAllChildren();

		// ÂàõÂª∫Áî®Êà∑È°π
		this.currentRoomData.users.forEach((user, index) => {
			const userItem = this.createUserItem(user, index);
			content.addChild(userItem);
		});

		// Êõ¥Êñ∞Â∏ÉÂ±Ä
		const layout = content.getComponent(Layout);
		if (layout) {
			layout.updateLayout();
		}
	}

	private createUserItem(user: UserInfo & { color: { r: number; g: number; b: number } }, index: number): Node {
		const userItem = instantiate(this.userItemTemplate);

		// ËÆæÁΩÆÁî®Êà∑‰ø°ÊÅØ
		const nameLabel = userItem.getChildByName("NameLabel")?.getComponent(Label);
		if (nameLabel) {
			nameLabel.string = user.nickname;
			// Â¶ÇÊûúÊòØÊàø‰∏ªÔºåÊ∑ªÂä†Ê†áËØÜ
			if (user.id === this.currentRoomData?.ownerId) {
				nameLabel.string = `üëë ${user.nickname}`;
				nameLabel.color = new Color(255, 215, 0); // ÈáëËâ≤
			}
		}

		const idLabel = userItem.getChildByName("IdLabel")?.getComponent(Label);
		if (idLabel) {
			idLabel.string = `ID: ${user.id}`;
		}

		// ËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅ
		const readyLabel = userItem.getChildByName("ReadyLabel")?.getComponent(Label);
		if (readyLabel) {
			const isReady = user.isReady || false;
			readyLabel.string = isReady ? "‚úÖ Â∑≤ÂáÜÂ§á" : "‚ùå Êú™ÂáÜÂ§á";
			readyLabel.color = isReady ? new Color(0, 255, 0) : new Color(255, 0, 0);
		}

		// ËÆæÁΩÆÁî®Êà∑È¢úËâ≤ÊåáÁ§∫Âô®
		const colorIndicator = userItem.getChildByName("ColorIndicator");
		if (colorIndicator) {
			const sprite = colorIndicator.getComponent(Sprite);
			if (sprite) {
				const color = new Color(user.color.r, user.color.g, user.color.b, 255);
				sprite.color = color;
			}
		}

		// ËÆæÁΩÆ‰ΩçÁΩÆ
		userItem.setPosition(0, -index * 30, 0);

		return userItem;
	}

	private clearRoomInfo() {
		// ÂÅúÊ≠¢Â∏ßÂêåÊ≠•
		this.stopFrameSync();

		if (this.roomIdLabel) {
			this.roomIdLabel.string = "ÊàøÈó¥ID: Êó†";
		}

		if (this.roomNameLabel) {
			this.roomNameLabel.string = "ÊàøÈó¥ÂêçÁß∞: Êó†";
		}

		if (this.ownerLabel) {
			this.ownerLabel.string = "Êàø‰∏ª: Êó†";
		}

		if (this.userCountLabel) {
			this.userCountLabel.string = "Áî®Êà∑Êï∞Èáè: 0/0";
		}

		if (this.userAlreadyReadyLabel) {
			this.userAlreadyReadyLabel.string = "Â∑≤ÂáÜÂ§á: 0/0";
		}

		// Ê∏ÖÁ©∫Áî®Êà∑ÂàóË°®
		if (this.userListScrollView) {
			this.userListScrollView.content.removeAllChildren();
		}

		// ÈáçÁΩÆÂáÜÂ§áÁä∂ÊÄÅ
		this.updateReadyStatus();
	}

	private updateReadyStatus() {
		if (!this.currentRoomData || !this.currentUser) {
			if (this.readyStatusLabel) {
				this.readyStatusLabel.string = "ÂáÜÂ§áÁä∂ÊÄÅ: Êú™ÁôªÂΩï";
			}
			if (this.readyButton) {
				this.readyButton.node.active = false;
			}
			return;
		}
		// ÊâæÂà∞ÂΩìÂâçÁî®Êà∑Âú®ÊàøÈó¥‰∏≠ÁöÑ‰ø°ÊÅØ
		const currentUserInRoom = this.currentRoomData.users.find((user) => user.id === this.currentUser!.id);
		const isReady = currentUserInRoom?.isReady || false;

		// Êõ¥Êñ∞ÂáÜÂ§áÁä∂ÊÄÅÊ†áÁ≠æ
		if (this.readyStatusLabel) {
			this.readyStatusLabel.string = `ÂáÜÂ§áÁä∂ÊÄÅ: ${isReady ? "Â∑≤ÂáÜÂ§á" : "Êú™ÂáÜÂ§á"}`;
		}

		// Êõ¥Êñ∞ÂáÜÂ§áÊåâÈíÆ
		if (this.readyButton) {
			this.readyButton.node.active = true;
			const buttonLabel = this.readyButton.getComponentInChildren(Label);
			if (buttonLabel) {
				buttonLabel.string = isReady ? "ÂèñÊ∂àÂáÜÂ§á" : "ÂáÜÂ§á";
			}
		}
	}

	private onRefreshClick() {
		console.log("Âà∑Êñ∞ÊàøÈó¥‰ø°ÊÅØ");
		this.updateRoomInfo();
	}

	// ÂáÜÂ§á/ÂèñÊ∂àÂáÜÂ§áÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
	public onReadyClick() {
		console.log("üéØ onReadyClick ÊñπÊ≥ïË¢´Ë∞ÉÁî®");

		if (!this.currentUser) {
			console.log("ËØ∑ÂÖàÁôªÂΩï");
			return;
		}

		if (!this.currentRoomData) {
			console.log("ÊÇ®‰∏çÂú®‰ªª‰ΩïÊàøÈó¥‰∏≠");
			return;
		}

		// ÊâæÂà∞ÂΩìÂâçÁî®Êà∑Âú®ÊàøÈó¥‰∏≠ÁöÑ‰ø°ÊÅØ
		const currentUserInRoom = this.currentRoomData.users.find((user) => user.id === this.currentUser!.id);
		const isReady = currentUserInRoom?.isReady || false;

		console.log(`üéØ ÂáÜÂ§áËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅ‰∏∫: ${!isReady}`);

		// Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅÂπ∂Â∞ùËØïËøûÊé•
		this.ensureConnection()
			.then(() => {
				console.log("üéØ ËøûÊé•Â∑≤Âª∫Á´ãÔºåË∞ÉÁî® callSetReady");
				this.callSetReady(!isReady);
			})
			.catch((err) => {
				console.error("Êó†Ê≥ïÂª∫Á´ãËøûÊé•:", err);
			});
	}

	// ÂÆûÈôÖË∞ÉÁî®ËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅ API
	private callSetReady(isReady: boolean) {
		this.roomClient
			.callApi("SetReady", {
				isReady: isReady,
			})
			.then((ret) => {
				if (ret.isSucc) {
					console.log(`ËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅÊàêÂäü: ${isReady ? "Â∑≤ÂáÜÂ§á" : "Êú™ÂáÜÂ§á"}`);
					// Á´ãÂç≥Êõ¥Êñ∞Êú¨Âú∞Êï∞ÊçÆ
					this.updateLocalReadyStatus(isReady);
				} else {
					console.error("ËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅÂ§±Ë¥•:", ret.err);
				}
			})
			.catch((err) => {
				console.error("ËÆæÁΩÆÂáÜÂ§áÁä∂ÊÄÅ API Ë∞ÉÁî®ÂºÇÂ∏∏:", err);
			});
	}

	// Êõ¥Êñ∞Êú¨Âú∞ÂáÜÂ§áÁä∂ÊÄÅ
	private updateLocalReadyStatus(isReady: boolean) {
		if (!this.currentRoomData || !this.currentUser) {
			return;
		}

		// ÊâæÂà∞ÂΩìÂâçÁî®Êà∑Âú®ÊàøÈó¥‰∏≠ÁöÑ‰ø°ÊÅØÂπ∂Êõ¥Êñ∞ÂáÜÂ§áÁä∂ÊÄÅ
		const currentUserInRoom = this.currentRoomData.users.find((user) => user.id === this.currentUser!.id);
		if (currentUserInRoom) {
			currentUserInRoom.isReady = isReady;
			console.log(`Êú¨Âú∞Êõ¥Êñ∞Áî®Êà∑ ${this.currentUser.id} ÂáÜÂ§áÁä∂ÊÄÅ‰∏∫: ${isReady}`);
			// Êõ¥Êñ∞UI
			this.updateReadyCount();
			this.updateReadyStatus();
		}
	}

	// Â§ÑÁêÜÁî®Êà∑Âä†ÂÖ•
	private handleUserJoin(msg: any) {
		if (!this.currentRoomData) {
			return;
		}

		// Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®ÔºàÈÅøÂÖçÈáçÂ§çÊ∑ªÂä†Ôºâ
		const existingUser = this.currentRoomData.users.find((user) => user.id === msg.user.id);
		if (!existingUser) {
			// Ê∑ªÂä†Êñ∞Áî®Êà∑Âà∞ÊàøÈó¥Êï∞ÊçÆ
			this.currentRoomData.users.push({
				...msg.user,
				color: msg.color,
				isReady: false, // Êñ∞Áî®Êà∑ÈªòËÆ§‰∏∫Êú™ÂáÜÂ§áÁä∂ÊÄÅ
			});
			console.log(`Ê∑ªÂä†Áî®Êà∑ ${msg.user.nickname} Âà∞ÊàøÈó¥Êï∞ÊçÆÔºåÂΩìÂâçÁî®Êà∑Êï∞: ${this.currentRoomData.users.length}`);
		}

		// Êõ¥Êñ∞UI
		this.updateRoomInfo();
	}

	// Â§ÑÁêÜÁî®Êà∑Á¶ªÂºÄ
	private handleUserExit(msg: any) {
		if (!this.currentRoomData) {
			return;
		}

		// ‰ªéÊàøÈó¥Êï∞ÊçÆ‰∏≠ÁßªÈô§Áî®Êà∑
		const userIndex = this.currentRoomData.users.findIndex((user) => user.id === msg.user.id);
		if (userIndex !== -1) {
			this.currentRoomData.users.splice(userIndex, 1);
			console.log(`ÁßªÈô§Áî®Êà∑ ${msg.user.nickname} ‰ªéÊàøÈó¥Êï∞ÊçÆÔºåÂΩìÂâçÁî®Êà∑Êï∞: ${this.currentRoomData.users.length}`);
		}

		// Êõ¥Êñ∞UI
		this.updateRoomInfo();
	}

	// Â§ÑÁêÜÊàø‰∏ªÂèòÊõ¥
	private handleOwnerChanged(msg: any) {
		if (!this.currentRoomData) {
			return;
		}

		// Êõ¥Êñ∞Êàø‰∏ªID
		this.currentRoomData.ownerId = msg.newOwner.id;
		console.log(`Êàø‰∏ªÂèòÊõ¥‰∏∫: ${msg.newOwner.nickname}`);

		// Êõ¥Êñ∞UI
		this.updateRoomInfo();
	}

	// Â§ÑÁêÜÁî®Êà∑ÂáÜÂ§áÁä∂ÊÄÅÂèòÊõ¥
	private handleUserReadyChanged(msg: any) {
		if (!this.currentRoomData) {
			return;
		}

		// ÊâæÂà∞Áî®Êà∑Âπ∂Êõ¥Êñ∞ÂáÜÂ§áÁä∂ÊÄÅ
		const user = this.currentRoomData.users.find((u) => u.id === msg.user.id);
		if (user) {
			user.isReady = msg.isReady;
			console.log(`Áî®Êà∑ ${msg.user.nickname} ÂáÜÂ§áÁä∂ÊÄÅÂèòÊõ¥‰∏∫: ${msg.isReady}`);
		}

		// Êõ¥Êñ∞UI
		this.updateRoomInfo();
	}
	// Á°Æ‰øùËøûÊé•Â∑≤Âª∫Á´ã
	private ensureConnection(): Promise<void> {
		return new Promise((resolve, reject) => {
			// Â∞ùËØïËøûÊé•ÔºàÊØèÊ¨°ÈÉΩÂ∞ùËØïÔºåËÆ© WsClient Ëá™Â∑±Â§ÑÁêÜÈáçÂ§çËøûÊé•Ôºâ
			this.roomClient
				.connect()
				.then(() => {
					console.log("WebSocket ËøûÊé•Â∑≤Âª∫Á´ã");
					resolve();
				})
				.catch((err) => {
					console.error("WebSocket ËøûÊé•Â§±Ë¥•:", err);
					reject(err);
				});
		});
	}

	// ÈÄÄÂá∫ÊàøÈó¥
	public onExitRoomClick() {
		console.log("üö™ onExitRoomClick ÊñπÊ≥ïË¢´Ë∞ÉÁî®");

		if (!this.currentUser) {
			console.log("ËØ∑ÂÖàÁôªÂΩï");
			return;
		}

		// Ê£ÄÊü•ËøûÊé•Áä∂ÊÄÅÂπ∂Â∞ùËØïËøûÊé•
		this.ensureConnection()
			.then(() => {
				console.log("üö™ ËøûÊé•Â∑≤Âª∫Á´ãÔºåË∞ÉÁî® callExitRoom");
				this.callExitRoom();
			})
			.catch((err) => {
				console.error("Êó†Ê≥ïÂª∫Á´ãËøûÊé•:", err);
			});
	}

	// ÂÆûÈôÖË∞ÉÁî®ÈÄÄÂá∫ÊàøÈó¥ API
	private callExitRoom() {
		this.roomClient
			.callApi("ExitRoom", {})
			.then((ret) => {
				if (ret.isSucc) {
					console.log("ÈÄÄÂá∫ÊàøÈó¥ÊàêÂäü");
					// Ê∏ÖÁ©∫ÊàøÈó¥Êï∞ÊçÆ
					this.currentRoomData = null;
					this.updateRoomInfo();
					// Êñ≠ÂºÄ‰∏éÊúçÂä°Âô®ÁöÑËøûÊé•
					this.roomClient
						.disconnect()
						.then(() => {
							this.node.active = false;
							console.log("Â∑≤Êñ≠ÂºÄ‰∏éÊúçÂä°Âô®ÁöÑËøûÊé•");
						})
						.catch((err) => {
							console.error("Êñ≠ÂºÄËøûÊé•Â§±Ë¥•:", err);
						});
				} else {
					console.error("ÈÄÄÂá∫ÊàøÈó¥Â§±Ë¥•:", ret.err);
				}
			})
			.catch((err) => {
				console.error("ÈÄÄÂá∫ÊàøÈó¥ API Ë∞ÉÁî®ÂºÇÂ∏∏:", err);
				// Âç≥‰ΩøAPIË∞ÉÁî®Â§±Ë¥•Ôºå‰πüÂ∞ùËØïÊñ≠ÂºÄËøûÊé•
				this.roomClient.disconnect().catch((disconnectErr) => {
					console.error("Âº∫Âà∂Êñ≠ÂºÄËøûÊé•Â§±Ë¥•:", disconnectErr);
				});
			});
	}

	// ËÆæÁΩÆÂΩìÂâçÊàøÈó¥Êï∞ÊçÆÔºàÁî±Â§ñÈÉ®Ë∞ÉÁî®Ôºâ
	public setCurrentRoom(roomData: RoomData, user: UserInfo, roomClient: WsClient<RoomServiceType>) {
		this.currentRoomData = roomData;
		this.currentUser = user;
		this.roomClient = roomClient;
		this.setupEventListeners();
		this.updateRoomInfo();
		this.initFrameSync();
	}

	// Ëé∑ÂèñÂΩìÂâçÊàøÈó¥Êï∞ÊçÆ
	public getCurrentRoom(): RoomData | null {
		return this.currentRoomData;
	}

	/**
	 * ÂàùÂßãÂåñÂ∏ßÂêåÊ≠•
	 */
	private initFrameSync() {
		if (!this.roomClient || !this.currentUser) {
			return;
		}

		// ÂàõÂª∫Â∏ßÂêåÊ≠•ËøûÊé•ÈÄÇÈÖçÂô®
		const frameSyncConnect: IFrameSyncConnect = {
			onAfterFrames: (msg: MsgAfterFrames) => {
				console.log("Êî∂Âà∞ËøΩÂ∏ßÊï∞ÊçÆ:", msg);
			},
			onSyncFrame: (msg: MsgSyncFrame) => {
				console.log("Êî∂Âà∞ÂêåÊ≠•Â∏ß:", msg.frameIndex);
				this.handleSyncFrame(msg);
			},
			onRequireSyncState: (msg: MsgRequireSyncState) => {
				console.log("ËØ∑Ê±ÇÁä∂ÊÄÅÂêåÊ≠•:", msg);
			},
			sendSyncState: (msg: MsgSyncState) => {
				// ÈÄöËøáÊàøÈó¥ÂÆ¢Êà∑Á´ØÂèëÈÄÅÁä∂ÊÄÅÂêåÊ≠•Êï∞ÊçÆ
				console.log("ÂèëÈÄÅÁä∂ÊÄÅÂêåÊ≠•Êï∞ÊçÆ:", msg);
				// TODO: ÂÆûÁé∞Áä∂ÊÄÅÂêåÊ≠•Ê∂àÊÅØÂèëÈÄÅ
			},
			sendInpFrame: (msg: MsgInpFrame) => {
				// ÈÄöËøáÊàøÈó¥ÂÆ¢Êà∑Á´ØÂèëÈÄÅËæìÂÖ•Â∏ß
				this.roomClient?.callApi("SendInput", msg);
			},
			disconnect: () => {
				console.log("Â∏ßÂêåÊ≠•ËøûÊé•Êñ≠ÂºÄ");
			},
		};

		// ÂàõÂª∫ËæìÂÖ•Â§ÑÁêÜÂô®
		const inputHandler: InputHandler = {
			execInput_Move: (connId: string, inputFrame: any, dt: number) => {
				console.log("ÊâßË°åÁßªÂä®ËæìÂÖ•:", connId, inputFrame, dt);
				// Âú®ËøôÈáåÂ§ÑÁêÜÁßªÂä®ÈÄªËæë
			},
			execInput_Attack: (connId: string, inputFrame: any, dt: number) => {
				console.log("ÊâßË°åÊîªÂáªËæìÂÖ•:", connId, inputFrame, dt);
				// Âú®ËøôÈáåÂ§ÑÁêÜÊîªÂáªÈÄªËæë
			},
		};

		// ÂàõÂª∫Â∏ßÂêåÊ≠•ÂÆ¢Êà∑Á´Ø
		this.frameSyncClient = new FrameSyncClient(
			frameSyncConnect,
			inputHandler,
			(stateData: any, stateFrameIndex: number) => {
				console.log("Áä∂ÊÄÅÂêåÊ≠•Êï∞ÊçÆ:", stateData, stateFrameIndex);
			},
			(dt: number, frameIndex: number) => {
				console.log("ÊâßË°åÂ∏ß:", frameIndex, dt);
				// Âú®ËøôÈáåÂ§ÑÁêÜÊØèÂ∏ßÁöÑÊ∏∏ÊàèÈÄªËæë
			},
			() => {
				// Ëé∑ÂèñÂΩìÂâçÊ∏∏ÊàèÁä∂ÊÄÅ
				return {
					roomData: this.currentRoomData,
					userData: this.currentUser,
				};
			}
		);

		// ÂºÄÂßãÊâßË°åÂ∏ß
		this.frameSyncClient.startExecuteFrame();
		console.log("Â∏ßÂêåÊ≠•ÂÆ¢Êà∑Á´ØÂ∑≤ÂàùÂßãÂåñ");
	}

	/**
	 * ÂèëÈÄÅËæìÂÖ•Êìç‰Ωú
	 */
	public sendInput(inputType: string, data: any) {
		if (this.frameSyncClient) {
			this.frameSyncClient.sendInputFrame({
				inputType: inputType,
				...data,
			});
		}
	}

	/**
	 * ÂÅúÊ≠¢Â∏ßÂêåÊ≠•
	 */
	private stopFrameSync() {
		if (this.frameSyncClient) {
			this.frameSyncClient.stopExecuteFrame();
			this.frameSyncClient = null;
			console.log("Â∏ßÂêåÊ≠•Â∑≤ÂÅúÊ≠¢");
		}
	}

	/**
	 * Â§ÑÁêÜÊ∏∏ÊàèÂºÄÂßãÊ∂àÊÅØ
	 */
	private handleGameStarted(msg: any) {
		if (this.gameTest) {
			// ‰∏∫ÊàøÈó¥ÂÜÖÊâÄÊúâÁî®Êà∑ÂàõÂª∫Áé©ÂÆ∂ËäÇÁÇπ
			if (this.currentRoomData && this.currentUser) {
				this.currentRoomData.users.forEach((user) => {
					const isCurrentPlayer = user.id === this.currentUser!.id;
					this.gameTest.createPlayer(user.id, isCurrentPlayer);
				});
			}

			// ÁõëÂê¨GameTestÁöÑÁé©ÂÆ∂ÁßªÂä®‰∫ã‰ª∂
			this.gameTest.node.on("playerMove", (inputData: any) => {
				this.sendInput(inputData.inputType, {
					x: inputData.x,
					y: inputData.y,
					timestamp: inputData.timestamp,
				});
			});
		}
	}

	/**
	 * Â§ÑÁêÜÂ∏ßÂêåÊ≠•Ê∂àÊÅØ
	 */
	private handleSyncFrame(msg: any) {
		// ËøôÈáåÂèØ‰ª•Â§ÑÁêÜÂ∏ßÂêåÊ≠•Êï∞ÊçÆÔºåÊõ¥Êñ∞Ê∏∏ÊàèÁä∂ÊÄÅ
		// ‰æãÂ¶ÇÔºöÊõ¥Êñ∞ÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑ‰ΩçÁΩÆÁ≠â
		if (msg.syncFrame && msg.syncFrame.connectionInputs) {
			msg.syncFrame.connectionInputs.forEach((connectionInput: any) => {
				// Ë∑≥ËøáÂΩìÂâçÁî®Êà∑ÁöÑËæìÂÖ•ÔºåÂõ†‰∏∫ÂΩìÂâçÁî®Êà∑ÁöÑ‰ΩçÁΩÆÂ∑≤ÁªèÂú®Êú¨Âú∞Êõ¥Êñ∞‰∫Ü
				if (this.currentUser && connectionInput.connectionId === this.currentUser.id.toString()) {
					return;
				}

				// Â§ÑÁêÜÊØè‰∏™ËøûÊé•ÁöÑËæìÂÖ•
				connectionInput.operates.forEach((operate: any) => {
					if (operate.inputType === "Move") {
						// Êõ¥Êñ∞ÂÖ∂‰ªñÁé©ÂÆ∂‰ΩçÁΩÆ
						this.gameTest.updatePlayerPosition(connectionInput.connectionId, new Vec3(operate.x, operate.y, 0));
						console.log(`Êõ¥Êñ∞Áé©ÂÆ∂ ${connectionInput.connectionId} ‰ΩçÁΩÆ: (${operate.x}, ${operate.y})`);
					}
				});
			});
		}
	}
}
